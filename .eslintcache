[{"/Users/Kajol/Desktop/FullStack/demo/src/index.js":"1","/Users/Kajol/Desktop/FullStack/demo/src/App.js":"2","/Users/Kajol/Desktop/FullStack/demo/src/reportWebVitals.js":"3","/Users/Kajol/Desktop/FullStack/demo/src/Components/Buttons.js":"4"},{"size":500,"mtime":1610364220291,"results":"5","hashOfConfig":"6"},{"size":3011,"mtime":1610386812989,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":348,"mtime":1610379378267,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"kf4mew",{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/Users/Kajol/Desktop/FullStack/demo/src/index.js",[],["20","21"],"/Users/Kajol/Desktop/FullStack/demo/src/App.js",["22","23","24"],"import React , {Component} from 'react';\nimport { tsConstructorType } from '../node_modules/@babel/types';\nimport './css/style.css'\nimport Button from './Components/Buttons'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current : '0',\n            previous : [],\n            nextIsReset : false\n        };\n    }\n    reset = () => {\n        this.setState({current : '0',previous : [], nextIsReset: false})\n    }\n\n    addToCurrent = (symbol) => {\n        if (['/','*','+','-'].indexOf(symbol) > -1) {\n            let {previous} = this.state;\n            previous.push(this.state.current + symbol);\n            this.setState({previous , nextIsReset : true});\n        } else {\n            if ((this.state.current === \"0\" && symbol !== \".\") || this.state.nextIsReset) {\n                this.setState({current: symbol , nextIsReset: false})\n            }else {\n                this.setState({current: this.state.current + symbol})\n            }\n        }\n    }\n\n    calculate = (symbol) => {\n        let {current , previous , nextIsReset} = this.state\n        if (previous.length > 0) {\n            current = eval(String(previous.join('') + current));\n        }\n        this.setState({current,previous: [],nextIsReset : true})\n    }\n    \n    render() {\n        const buttons = [\n            {symbol: 'C' , cols: 3 , action: this.reset },\n            {symbol: '/' , cols: 1 , action: this.addToCurrent },\n            {symbol: '7' , cols: 1 , action: this.addToCurrent },\n            {symbol: '8' , cols: 1 , action: this.addToCurrent },\n            {symbol: '9' , cols: 1 , action: this.addToCurrent },\n            {symbol: '*' , cols: 1 , action: this.addToCurrent },\n            {symbol: '4' , cols: 1 , action: this.addToCurrent },\n            {symbol: '5' , cols: 1 , action: this.addToCurrent },\n            {symbol: '6' , cols: 1 , action: this.addToCurrent },\n            {symbol: '-' , cols: 1 , action: this.addToCurrent },\n            {symbol: '1' , cols: 1 , action: this.addToCurrent },\n            {symbol: '2' , cols: 1 , action: this.addToCurrent },\n            {symbol: '3' , cols: 1 , action: this.addToCurrent },\n            {symbol: '+' , cols: 1 , action: this.addToCurrent },\n            {symbol: '0' , cols: 2 , action: this.addToCurrent },\n            {symbol: '.' , cols: 1 , action: this.addToCurrent },\n            {symbol: '=' , cols: 1 , action: this.calculate }\n            \n        ];\n        return (\n            <div>\n                {this.state.previous.length > 0 ?\n                    <div className= 'floaty-last'>{this.state.previous}</div>\n                : null}\n                <input className = 'result' type='text' value={this.state.current}/>\n                \n                {buttons.map( (btn,i) => {\n                    return <Button key= {i} symbol= {btn.symbol} cols= {btn.cols} action= {(symbol) => btn.action(symbol)} />\n                } )}\n            </div>\n        );\n    }\n}\n\nexport default App;","/Users/Kajol/Desktop/FullStack/demo/src/reportWebVitals.js",[],"/Users/Kajol/Desktop/FullStack/demo/src/Components/Buttons.js",[],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":2,"column":10,"nodeType":"31","messageId":"32","endLine":2,"endColumn":27},{"ruleId":"29","severity":1,"message":"33","line":34,"column":35,"nodeType":"31","messageId":"32","endLine":34,"endColumn":46},{"ruleId":"34","severity":1,"message":"35","line":36,"column":23,"nodeType":"36","messageId":"37","endLine":36,"endColumn":27},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'tsConstructorType' is defined but never used.","Identifier","unusedVar","'nextIsReset' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]